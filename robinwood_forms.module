<?php

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function robinwood_forms_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  $product_ids = array(
    'donation' => 1,
    'active_membership' => 2,
    'sponsor_membership' => 3,
    'regular_donation' => 4,
  );

  if ($entity_form['#entity_type'] == 'commerce_line_item' && in_array($entity_form['#parents'][0], array(
      'field_line_item_donation',
      'field_regular_donation_line_item',
      'field_act_membership_line_item',
      'field_sup_membership_line_item',
    ))) {
    // Set quantity field value and do not show a widget.
    $entity_form['quantity']['#type'] = 'value';
    $entity_form['quantity']['#value'] = 1;

    // Set product field value and do not show a widget.
    $product_field = &$entity_form['commerce_product'];
    $product_field_language = $product_field['#language'];
    $product_field[$product_field_language]['#type'] = 'value';

    switch($entity_form['#parents'][0]) {
      case 'field_line_item_donation':
        $product_field[$product_field_language]['#value'] = $product_ids['donation'];
        break;
      case 'field_regular_donation_line_item':
        $product_field[$product_field_language]['#value'] = $product_ids['regular_donation'];
        break;
      case 'field_act_membership_line_item':
        $product_field[$product_field_language]['#value'] = $product_ids['active_membership'];

        // Additionally, change interval field label visibility.
        break;
      case 'field_sup_membership_line_item':
        $product_field[$product_field_language]['#value'] = $product_ids['sponsor_membership'];

        // Additionally, change interval field label visibility.
        $entity_form['field_membership_support_interva'][$entity_form['field_membership_support_interva']['#language']]['#title_display'] = 'invisible';
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function robinwood_forms_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'donation_entityform_edit_form') {
    $field_language = $form['field_donation_customer_profile']['#language'];
    $form['field_donation_customer_profile'][$field_language]['profiles'][0]['#title'] = $form['field_donation_customer_profile'][$field_language]['#title'];
  }
  elseif (
    $form_id == 'request_membership_entityform_edit_form'
    || $form_id == 'foerdermitglied_werden_entityform_edit_form'
  ) {
    $field_language = $form['field_member_customer_profil']['#language'];
    $form['field_member_customer_profil'][$field_language]['profiles'][0]['#title'] = $form['field_member_customer_profil'][$field_language]['#title'];
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function robinwood_forms_field_widget_form_alter(&$element, &$form_state, $context) {
  // Alter address fields in customer profiles.
  if (
    $context['field']['type'] == 'addressfield'
    && $context['instance']['entity_type'] == 'commerce_customer_profile'
    && $context['instance']['field_name'] == 'commerce_customer_address'
    && in_array($element['#field_parents'][0], array(
      'field_donation_customer_profile',
      'field_member_customer_profil',
      '',
    ))
  ) {
    $element['street_block']['thoroughfare']['#title'] = 'Straße mit Hausnummer';
    $element['street_block']['premise']['#access'] = FALSE;
    $element['country']['#weight'] = 51;
  }

  // Add custom validation to BIC field in payment transaction forms.
  if (
    $context['instance']['entity_type'] == 'commerce_payment_transaction'
    && $context['instance']['field_name'] == 'field_bic'
    && $form_state['build_info']['form_id'] != 'field_ui_field_edit_form'
  ) {
    if (!isset($element['value']['#element_validate'])) {
      $element['value']['#element_validate'] = array();
    }
    array_unshift($element['value']['#element_validate'], '_robinwood_forms_bic_field_validate');
  }
}

function _robinwood_forms_bic_field_validate($element, &$form_state, $form) {
  $iban_parents = array_merge(
    $element['#field_parents'],
    array(
      'field_iban',
      LANGUAGE_NONE,
      0,
      'iban_field',
    )
  );
  $iban = drupal_array_get_nested_value($form_state['values'], $iban_parents);
  $bic_call = _robinwood_forms_cmrf_send_call(
    'Bic',
    'getfromiban',
    array(
      'iban' => $iban,
    ),
    array()
  );

  if (empty($element['#value'])) {
    if (
      $bic_call->getStatus() == \CMRF\Drupal\Call::STATUS_DONE
      && ($bic_reply = $bic_call->getReply())
      && !empty($bic_reply['bic'])
    ) {
      form_set_value($element, $bic_reply['bic'], $form_state);
      // TODO: Why is setting $form_state['input'] also necessary?
      drupal_array_set_nested_value($form_state['input'], $element['#parents'], $bic_reply['bic'], TRUE);
      drupal_set_message('Ihre BIC wurde automatisch ermittelt: ' . $bic_reply['bic']);
    }
    else {
      form_error($element, 'Die BIC konnte nicht automatisch ermittelt werden, bitte geben Sie diese ein.');
    }
  }
  else {
    if (
      $bic_call->getStatus() == \CMRF\Drupal\Call::STATUS_DONE
      && ($bic_reply = $bic_call->getReply())
      && !empty($bic_reply['bic'])
      && $bic_reply['bic'] != $element['#value']
    ) {
      form_error($element, 'Die eingegebene BIC stimmt nicht mit der automatisch ermittelten (' . $bic_reply['bic'] . ') überein, bitte überprüfen Sie die BIC.');
    }
  }
}

function _robinwood_forms_cmrf_send_call($entity, $action, $parameters, $options, $profile=null, $callbacks=array()) {
  $connector_id = _robinwood_forms_cmrf_get_connector_id($profile);
  $core = cmrf_core_get_core();
  $call = $core->createCall($connector_id, $entity, $action, $parameters, $options, $callbacks);
  $core->executeCall($call);
  return $call;
}

function _robinwood_forms_cmrf_get_connector_id($profile=null) {
  $connector_name = 'robinwood_forms_cmrf_connector';
  if (!empty($profile)) {
    $connector_name .= ':'.$profile;
  }

  $core = cmrf_core_get_core();
  $connector_id = variable_get($connector_name);
  if (empty($connector_id)) {
    $connector_id = $core->registerConnector($connector_name, $profile);
    variable_set($connector_name, $connector_id);
  }
  return $connector_id;
}
